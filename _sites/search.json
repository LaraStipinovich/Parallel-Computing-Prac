[
  {
    "objectID": "Parallel-Computing-Prac.html",
    "href": "Parallel-Computing-Prac.html",
    "title": "Parallel Computing Prac",
    "section": "",
    "text": "output &lt;- foreach(i = 1:100, .combine = rbind) %do% {\n  data &lt;- rexp(100, rate = 1)\n  mean_data &lt;- mean(data)\n  var_data &lt;- var(data)\n  c(Mean = mean_data, Variance = var_data)\n}\nx &lt;-  head(output)\n\nThe first 6 means and variances:\n\n\n              Mean  Variance\nresult.1 1.1049459 1.1089918\nresult.2 1.0837018 1.1025773\nresult.3 0.9770152 0.8186348\nresult.4 0.9865300 0.8786241\nresult.5 1.0005910 1.1056645\nresult.6 0.9071915 0.8503273"
  },
  {
    "objectID": "Parallel-Computing-Prac.html#question-1",
    "href": "Parallel-Computing-Prac.html#question-1",
    "title": "Parallel Computing Prac",
    "section": "",
    "text": "output &lt;- foreach(i = 1:100, .combine = rbind) %do% {\n  data &lt;- rexp(100, rate = 1)\n  mean_data &lt;- mean(data)\n  var_data &lt;- var(data)\n  c(Mean = mean_data, Variance = var_data)\n}\nx &lt;-  head(output)\n\nThe first 6 means and variances:\n\n\n              Mean  Variance\nresult.1 1.1049459 1.1089918\nresult.2 1.0837018 1.1025773\nresult.3 0.9770152 0.8186348\nresult.4 0.9865300 0.8786241\nresult.5 1.0005910 1.1056645\nresult.6 0.9071915 0.8503273"
  },
  {
    "objectID": "Parallel-Computing-Prac.html#question-2",
    "href": "Parallel-Computing-Prac.html#question-2",
    "title": "Parallel Computing Prac",
    "section": "Question 2:",
    "text": "Question 2:\n\ncl &lt;- makeCluster(detectCores() - 1)\nregisterDoParallel(cl)\n\nruns &lt;- 1000  \nsize &lt;- 1000\n\nboot_medians &lt;- foreach(i = 1:runs, .combine = c, .packages = 'MASS') %dopar% {\n    sample_data &lt;- sample(galaxies, replace = TRUE)\n    median(sample_data) \n}\n\nsingle_par_times &lt;- system.time( \n  boot_medians &lt;- foreach(i = 1:runs, .combine = c, .packages = 'MASS') %dopar% {\n    sample_data &lt;- sample(galaxies, replace = TRUE)\n    median(sample_data) \n    }\n)\n\nserial_times &lt;- system.time( \n  serial_boot_meds &lt;- replicate(runs, median(sample(galaxies, replace = TRUE)))\n)\n\n\npar_bs_batch_fn &lt;- function(runs, size = 1000) {\n  num_batches &lt;- runs / size  \n  \n  unlist(foreach(i = 1:num_batches, .combine = c, .packages = 'MASS') %dopar% {\n    replicate(size, median(sample(galaxies, replace = TRUE)))\n  })\n}\n\nbatch_par_times &lt;-  system.time( \n  par_bs_medians_batch &lt;- par_bs_batch_fn(runs, size)\n)\n\nstopCluster(cl)\n\nSummary of the bootstrap medians from single sample:\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  19846   20425   20834   20871   21062   22282 \n\n\nSerial Processing Time:\n\n\n   user  system elapsed \n   0.06    0.00    0.08 \n\n\nParallel (Single Sample) Time:\n\n\n   user  system elapsed \n   0.36    0.06    0.46 \n\n\nParallel (Batching 1000 Samples) Time:\n\n\n   user  system elapsed \n   0.01    0.00    0.11"
  },
  {
    "objectID": "Parallel-Computing-Prac.html#question-3",
    "href": "Parallel-Computing-Prac.html#question-3",
    "title": "Parallel Computing Prac",
    "section": "Question 3:",
    "text": "Question 3:\n\ncl &lt;- makeCluster(detectCores() - 1)\nregisterDoParallel(cl)\n\ntrue_mean &lt;- 1 \n\ncoverage_est &lt;- function() {\n  sample_data &lt;- rexp(50, rate = 1)\n  \n  boot_means &lt;- replicate(1000, mean(sample(sample_data, replace = TRUE)))\n\n  CI_lower &lt;- quantile(boot_means, 0.025)\n  CI_upper &lt;- quantile(boot_means, 0.975)\n  coverage &lt;- as.numeric(CI_lower &lt;= 1 & CI_upper &gt;= 1)\n  return(coverage)\n}\n\ncoverage_results &lt;- foreach(i = 1:1000, .combine = c) %dopar% {\n  coverage_est()\n}\n\nstopCluster(cl)\n\ncoverage_probability &lt;- round(mean(coverage_results), 4)\n\nEstimated Coverage Probability: 0.927"
  },
  {
    "objectID": "Parallel-Computing-Prac.html#question-4",
    "href": "Parallel-Computing-Prac.html#question-4",
    "title": "Parallel Computing Prac",
    "section": "Question 4:",
    "text": "Question 4:\n\nset.seed(1234)\n\nvector_list &lt;- list(irnorm(5), irnorm(5), irnorm(5))\n\nmax_value &lt;- foreach(i = vector_list, .combine = c) %do% {\n  max(nextElem(i))\n}\n\nfind_max &lt;- function() {\n  it &lt;- irnorm(5) \n  vectors &lt;- as.numeric(nextElem(it, 5))\n  return(max(vectors))\n}\n\nforeach_result &lt;- foreach(i = 1:3, .combine = c) %do% find_max()\n\nThe largest values in the vectors:\nVector 1: 2.4158352\nVector 2: 0.4595894\nVector 3: 0.5747557"
  },
  {
    "objectID": "Parallel-Computing-Prac.html#question-5",
    "href": "Parallel-Computing-Prac.html#question-5",
    "title": "Parallel Computing Prac",
    "section": "Question 5:",
    "text": "Question 5:\n\n# Using foreach\nsystem.time({\n  foreach_result &lt;- foreach(i = 1:3, .combine = c) %do% find_max()\n  print(foreach_result)\n})\n\n[1]  1.1022975 -0.2942939  1.4494963\n\n\n   user  system elapsed \n   0.02    0.00    0.00 \n\n# Using replicate\nsystem.time({\n  replicate_result &lt;- replicate(3, find_max())\n  print(replicate_result)\n})\n\n[1] -0.4968500 -0.1623095  1.6478175\n\n\n   user  system elapsed \n      0       0       0"
  },
  {
    "objectID": "CoverPage.html",
    "href": "CoverPage.html",
    "title": "Cover Page",
    "section": "",
    "text": "Welcome to my prac 2 page, please find the link to my Git Hub here!"
  },
  {
    "objectID": "CoverPage.html#welcome-and-git-repository",
    "href": "CoverPage.html#welcome-and-git-repository",
    "title": "Cover Page",
    "section": "",
    "text": "Welcome to my prac 2 page, please find the link to my Git Hub here!"
  }
]